/**
 * Telegram Bot API Helper Functions
 */

export interface TelegramMessage {
  message_id: number;
  from: {
    id: number;
    is_bot: boolean;
    first_name: string;
    last_name?: string;
    username?: string;
  };
  chat: {
    id: number;
    type: "private" | "group" | "supergroup" | "channel";
    title?: string;
  };
  date: number;
  text?: string;
}

export interface TelegramUpdate {
  update_id: number;
  message?: TelegramMessage;
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
 */
export async function sendTelegramMessage(
  botToken: string,
  chatId: number | string,
  text: string,
  options?: {
    parse_mode?: "Markdown" | "HTML";
    reply_markup?: any;
  }
): Promise<void> {
  const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
  
  const body = {
    chat_id: chatId,
    text,
    ...options,
  };

  const response = await fetch(url, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(body),
  });

  if (!response.ok) {
    const error = await response.json();
    throw new Error(`Telegram API error: ${JSON.stringify(error)}`);
  }
}

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –¥–ª—è –±–æ—Ç–∞
 */
export async function setTelegramWebhook(
  botToken: string,
  webhookUrl: string
): Promise<void> {
  const url = `https://api.telegram.org/bot${botToken}/setWebhook`;
  
  const response = await fetch(url, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      url: webhookUrl,
    }),
  });

  if (!response.ok) {
    const error = await response.json();
    throw new Error(`Telegram setWebhook error: ${JSON.stringify(error)}`);
  }
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ webhook
 */
export async function deleteTelegramWebhook(botToken: string): Promise<void> {
  const url = `https://api.telegram.org/bot${botToken}/deleteWebhook`;
  
  const response = await fetch(url, {
    method: "POST",
  });

  if (!response.ok) {
    const error = await response.json();
    throw new Error(`Telegram deleteWebhook error: ${JSON.stringify(error)}`);
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
 */
export async function getTelegramBotInfo(botToken: string): Promise<{
  id: number;
  is_bot: boolean;
  first_name: string;
  username: string;
}> {
  const url = `https://api.telegram.org/bot${botToken}/getMe`;
  
  const response = await fetch(url, {
    method: "GET",
  });

  if (!response.ok) {
    const error = await response.json();
    throw new Error(`Telegram getMe error: ${JSON.stringify(error)}`);
  }

  const data = await response.json();
  return data.result;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Ç–∏–∫–µ—Ç–µ
 */
export function formatNewTicketMessage(ticket: {
  number: string;
  title: string;
  description: string;
  priority: string;
  creator: { name: string; email: string };
  tenant: { name: string };
}): string {
  return `
üé´ *–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç: ${ticket.number}*

*–ù–∞–∑–≤–∞–Ω–∏–µ:* ${ticket.title}
*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* ${ticket.priority}
*–°–æ–∑–¥–∞—Ç–µ–ª—å:* ${ticket.creator.name} (${ticket.creator.email})
*–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:* ${ticket.tenant.name}

*–û–ø–∏—Å–∞–Ω–∏–µ:*
${ticket.description}
  `.trim();
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞
 */
export function formatTicketUpdateMessage(ticket: {
  number: string;
  title: string;
  status: string;
  assignee?: { name: string } | null;
}): string {
  const assigneeText = ticket.assignee 
    ? `*–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* ${ticket.assignee.name}`
    : "*–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω";

  return `
üîÑ *–¢–∏–∫–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: ${ticket.number}*

*–ù–∞–∑–≤–∞–Ω–∏–µ:* ${ticket.title}
*–°—Ç–∞—Ç—É—Å:* ${ticket.status}
${assigneeText}
  `.trim();
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
 */
export function formatNewCommentMessage(comment: {
  ticket: { number: string; title: string };
  author: { name: string };
  content: string;
}): string {
  return `
üí¨ *–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ ${comment.ticket.number}*

*–ê–≤—Ç–æ—Ä:* ${comment.author.name}
*–¢–∏–∫–µ—Ç:* ${comment.ticket.title}

*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:*
${comment.content}
  `.trim();
}

