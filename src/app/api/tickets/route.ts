import { NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import { prisma } from "@/lib/prisma";
import { z } from "zod";
import { createTicketNotifications } from "@/lib/notifications";
import { createAuditLog, getClientIp, getUserAgent } from "@/lib/audit-log";
import { calculateSlaDueDate } from "@/lib/sla-utils";
import { autoAssignTicket } from "@/lib/ticket-assignment";

const createTicketSchema = z.object({
  title: z.string().min(3, "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞"),
  description: z.string().min(5, "–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤"),
  priority: z.enum(["LOW", "MEDIUM", "HIGH", "URGENT"]),
  queueId: z.string().optional(),
  categoryId: z.string().optional(),
  customFields: z.record(z.string()).optional(), // { fieldId: value }
});

// GET /api/tickets - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–∏–∫–µ—Ç—ã (—Å —É—á–µ—Ç–æ–º tenant)
export async function GET(request: Request) {
  try {
    const session = await getServerSession(authOptions);
    if (!session?.user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const { searchParams } = new URL(request.url);
    const status = searchParams.get("status");
    const priority = searchParams.get("priority");
    const queueId = searchParams.get("queue");

    const where: any = {};

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π ADMIN (–±–µ–∑ tenantId) –ù–ï –≤–∏–¥–∏—Ç –æ–±—ã—á–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã
    if (session.user.role === "ADMIN" && !session.user.tenantId) {
      // –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å support-—Ç–∏–∫–µ—Ç–∞–º–∏
      return NextResponse.json([]);
    }

    // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ tenantId
    if (!session.user.tenantId) {
      return NextResponse.json({ error: "Tenant ID required" }, { status: 400 });
    }
    where.tenantId = session.user.tenantId;

    // –õ–æ–≥–∏–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ç–∏–∫–µ—Ç–æ–≤:
    // - USER: –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Ç–∏–∫–µ—Ç—ã (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–º)
    // - AGENT: –≤–∏–¥–∏—Ç –í–°–ï —Ç–∏–∫–µ—Ç—ã —Å–≤–æ–µ–≥–æ —Ç–µ–Ω–∞–Ω—Ç–∞ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤)
    // - TENANT_ADMIN: –≤–∏–¥–∏—Ç –í–°–ï —Ç–∏–∫–µ—Ç—ã —Å–≤–æ–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    if (session.user.role === "USER") {
      where.creatorId = session.user.id;
    }
    // AGENT –∏ TENANT_ADMIN –≤–∏–¥—è—Ç –≤—Å–µ —Ç–∏–∫–µ—Ç—ã —Å–≤–æ–µ–≥–æ —Ç–µ–Ω–∞–Ω—Ç–∞ (—Ñ–∏–ª—å—Ç—Ä –ø–æ tenantId —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)

    if (status) {
      where.status = status;
    }

    if (priority) {
      where.priority = priority;
    }

    if (queueId) {
      where.queueId = queueId;
    }

    const tickets = await prisma.ticket.findMany({
      where,
      select: {
        id: true,
        number: true,
        title: true,
        description: true,
        status: true,
        priority: true,
        createdAt: true,
        slaDueDate: true,
        slaBreached: true,
        creator: {
          select: {
            id: true,
            name: true,
            email: true,
            avatar: true,
          },
        },
        assignee: {
          select: {
            id: true,
            name: true,
            email: true,
            avatar: true,
          },
        },
        category: true,
        queue: true,
        tenant: {
          select: {
            slug: true,
          },
        },
        _count: {
          select: {
            comments: true,
          },
        },
      },
      orderBy: {
        createdAt: "desc",
      },
    });

    return NextResponse.json(tickets);
  } catch (error) {
    console.error("Error fetching tickets:", error);
    return NextResponse.json(
      { error: "Failed to fetch tickets" },
      { status: 500 }
    );
  }
}

// POST /api/tickets - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç
export async function POST(request: Request) {
  try {
    const session = await getServerSession(authOptions);
    if (!session?.user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    // –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã (—Ç–æ–ª—å–∫–æ support-—Ç–∏–∫–µ—Ç—ã)
    if (session.user.role === "ADMIN" && !session.user.tenantId) {
      return NextResponse.json(
        { error: "Super admins cannot create regular tickets. Use support tickets instead." },
        { status: 403 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ tenantId
    if (!session.user.tenantId) {
      return NextResponse.json({ error: "Tenant ID required" }, { status: 400 });
    }

    const body = await request.json();
    const validatedData = createTicketSchema.parse(body);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ tenant
    const lastTicket = await prisma.ticket.findFirst({
      where: { tenantId: session.user.tenantId },
      orderBy: { number: "desc" },
      select: { number: true },
    });

    const nextNumber = (lastTicket?.number || 0) + 1;

    // –í—ã—á–∏—Å–ª—è–µ–º SLA –¥–ª—è —Ç–∏–∫–µ—Ç–∞
    const now = new Date();
    const slaData = await calculateSlaDueDate({
      priority: validatedData.priority,
      categoryId: validatedData.categoryId || null,
      queueId: validatedData.queueId || null,
      tenantId: session.user.tenantId,
      createdAt: now,
    });

    // –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç
    const ticket = await prisma.ticket.create({
      data: {
        number: nextNumber,
        title: validatedData.title,
        description: validatedData.description,
        priority: validatedData.priority,
        queueId: validatedData.queueId,
        categoryId: validatedData.categoryId,
        tenantId: session.user.tenantId,
        creatorId: session.user.id,
        status: "OPEN",
        slaId: slaData?.slaId,
        slaDueDate: slaData?.slaDueDate,
        slaBreached: false,
      },
      include: {
        creator: {
          select: {
            id: true,
            name: true,
            email: true,
            avatar: true,
          },
        },
        category: true,
        queue: true,
        slaPolicy: true,
      },
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π
    if (validatedData.customFields && Object.keys(validatedData.customFields).length > 0) {
      const customFieldValues = Object.entries(validatedData.customFields).map(
        ([fieldId, value]) => ({
          customFieldId: fieldId,
          ticketId: ticket.id,
          value: String(value),
        })
      );

      await prisma.customFieldValue.createMany({
        data: customFieldValues,
      });
    }

    // ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏
    const assignedAgentId = await autoAssignTicket({
      tenantId: session.user.tenantId,
      categoryId: validatedData.categoryId || null,
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–∫–µ—Ç —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º
    if (assignedAgentId) {
      await prisma.ticket.update({
        where: { id: ticket.id },
        data: { assigneeId: assignedAgentId },
      });
    }

    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Ç–∏–∫–µ—Ç–µ
    try {
      await createTicketNotifications(
        ticket.id,
        "TICKET_CREATED",
        ticket.title,
        session.user.id,
        assignedAgentId || undefined
      );
    } catch (error) {
      console.error("Error creating notifications:", error);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    }

    // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞
    await createAuditLog({
      tenantId: session.user.tenantId,
      userId: session.user.id,
      action: "CREATE",
      resourceType: "TICKET",
      resourceId: ticket.id,
      metadata: {
        title: ticket.title,
        priority: ticket.priority,
        categoryId: ticket.categoryId,
        number: ticket.number,
      },
      ipAddress: getClientIp(request),
      userAgent: getUserAgent(request),
    });

    return NextResponse.json(ticket, { status: 201 });
  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: "Validation error", details: error.errors },
        { status: 400 }
      );
    }

    console.error("Error creating ticket:", error);
    return NextResponse.json(
      { error: "Failed to create ticket" },
      { status: 500 }
    );
  }
}
