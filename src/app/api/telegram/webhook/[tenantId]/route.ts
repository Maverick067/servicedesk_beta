import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { sendTelegramMessage, TelegramUpdate } from "@/lib/telegram";

/**
 * POST /api/telegram/webhook/[tenantId] - Telegram Bot Webhook
 * 
 * –≠—Ç–æ—Ç endpoint –ø–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram Bot API.
 * –ö–∞–∂–¥—ã–π tenant –∏–º–µ–µ—Ç —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π webhook URL.
 */
export async function POST(
  req: NextRequest,
  { params }: { params: { tenantId: string } }
) {
  try {
    const { tenantId } = params;

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ tenant
    const bot = await prisma.telegramBot.findFirst({
      where: {
        tenantId,
        isActive: true,
      },
    });

    if (!bot) {
      return NextResponse.json(
        { error: "Bot not found or inactive" },
        { status: 404 }
      );
    }

    // –ü–∞—Ä—Å–∏–º update –æ—Ç Telegram
    const update: TelegramUpdate = await req.json();

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (!update.message?.text) {
      return NextResponse.json({ ok: true });
    }

    const message = update.message;
    const chatId = message.chat.id;
    const text = message.text;
    const userId = message.from.id;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    await prisma.telegramUser.upsert({
      where: {
        telegramId_botId: {
          telegramId: userId.toString(),
          botId: bot.id,
        },
      },
      create: {
        telegramId: userId.toString(),
        botId: bot.id,
        firstName: message.from.first_name,
        lastName: message.from.last_name,
        username: message.from.username,
        chatId: chatId.toString(),
      },
      update: {
        firstName: message.from.first_name,
        lastName: message.from.last_name,
        username: message.from.username,
        chatId: chatId.toString(),
      },
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await prisma.telegramMessage.create({
      data: {
        botId: bot.id,
        messageId: message.message_id.toString(),
        chatId: chatId.toString(),
        fromUserId: userId.toString(),
        text: text,
        messageType: "text",
      },
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if (text.startsWith("/")) {
      return await handleCommand(bot.id, bot.botToken, chatId, text, message);
    }

    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º help
    await sendTelegramMessage(
      bot.botToken,
      chatId,
      "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    );

    return NextResponse.json({ ok: true });
  } catch (error) {
    console.error("[Telegram Webhook Error]", error);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ Telegram
 */
async function handleCommand(
  botId: string,
  botToken: string,
  chatId: number,
  text: string,
  message: any
): Promise<NextResponse> {
  const command = text.split(" ")[0].toLowerCase();

  switch (command) {
    case "/start":
      await sendTelegramMessage(
        botToken,
        chatId,
        `–ü—Ä–∏–≤–µ—Ç, ${message.from.first_name}! üëã\n\n–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞–º–∏.\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n/ticket - –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç\n/link - –ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç`
      );
      break;

    case "/help":
      await sendTelegramMessage(
        botToken,
        chatId,
        `üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n/ticket - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç\n/link - –ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram –∫ –∞–∫–∫–∞—É–Ω—Ç—É\n/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É`,
        { parse_mode: "Markdown" }
      );
      break;

    case "/ticket":
      // –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /ticket –ù–∞–∑–≤–∞–Ω–∏–µ - –û–ø–∏—Å–∞–Ω–∏–µ
      const ticketMatch = text.match(/^\/ticket\s+(.+?)\s+-\s+(.+)$/s);
      
      if (!ticketMatch) {
        await sendTelegramMessage(
          botToken,
          chatId,
          "üé´ *–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞*\n\n–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ —á–µ—Ä–µ–∑ Telegram, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n`/ticket [–ù–∞–∑–≤–∞–Ω–∏–µ] - [–û–ø–∏—Å–∞–Ω–∏–µ]`\n\n–ü—Ä–∏–º–µ—Ä:\n`/ticket –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—á—Ç–∞ - –ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ`",
          { parse_mode: "Markdown" }
        );
        break;
      }

      const [, ticketTitle, ticketDescription] = ticketMatch;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ Telegram –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const telegramUser = await prisma.telegramUser.findFirst({
        where: {
          telegramId: message.from.id.toString(),
          botId,
        },
        include: {
          user: {
            select: {
              id: true,
              tenantId: true,
            },
          },
        },
      });

      if (!telegramUser?.userId) {
        await sendTelegramMessage(
          botToken,
          chatId,
          `‚ùå –í–∞—à Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /link –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.`,
          { parse_mode: "Markdown" }
        );
        break;
      }

      // –ü–æ–ª—É—á–∞–µ–º tenant –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–∏–∫–µ—Ç–∞
      const tenant = await prisma.tenant.findUnique({
        where: { id: telegramUser.user!.tenantId! },
        select: { slug: true, name: true },
      });

      if (!tenant) {
        await sendTelegramMessage(
          botToken,
          chatId,
          "‚ùå –û—à–∏–±–∫–∞: –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        );
        break;
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞
      const ticketCount = await prisma.ticket.count({
        where: { tenantId: telegramUser.user!.tenantId! },
      });
      const ticketNumber = `${tenant.slug.toUpperCase()}-${String(ticketCount + 1).padStart(3, "0")}`;

      // –°–æ–∑–¥–∞–µ–º —Ç–∏–∫–µ—Ç
      const newTicket = await prisma.ticket.create({
        data: {
          number: ticketNumber,
          title: ticketTitle.trim(),
          description: ticketDescription.trim(),
          status: "OPEN",
          priority: "MEDIUM",
          tenantId: telegramUser.user!.tenantId!,
          creatorId: telegramUser.user!.id,
        },
      });

      await sendTelegramMessage(
        botToken,
        chatId,
        `‚úÖ –¢–∏–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n*–ù–æ–º–µ—Ä:* ${ticketNumber}\n*–ù–∞–∑–≤–∞–Ω–∏–µ:* ${ticketTitle.trim()}\n*–°—Ç–∞—Ç—É—Å:* –û—Ç–∫—Ä—ã—Ç`,
        { parse_mode: "Markdown" }
      );

      // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–≥–µ–Ω—Ç–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—É–¥–∞
      const bot = await prisma.telegramBot.findUnique({
        where: { id: botId },
        select: { groupChatId: true, notifyOnNewTicket: true },
      });

      if (bot?.groupChatId && bot.notifyOnNewTicket) {
        await sendTelegramMessage(
          botToken,
          bot.groupChatId,
          `üé´ *–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç: ${ticketNumber}*\n\n*–ù–∞–∑–≤–∞–Ω–∏–µ:* ${ticketTitle.trim()}\n*–û–ø–∏—Å–∞–Ω–∏–µ:* ${ticketDescription.trim()}\n*–°–æ–∑–¥–∞—Ç–µ–ª—å:* ${message.from.first_name}`,
          { parse_mode: "Markdown" }
        );
      }
      break;

    case "/link":
      const linkTelegramUser = await prisma.telegramUser.findFirst({
        where: {
          telegramId: message.from.id.toString(),
          botId,
        },
        include: {
          user: {
            select: {
              name: true,
              email: true,
            },
          },
        },
      });

      if (linkTelegramUser?.userId) {
        await sendTelegramMessage(
          botToken,
          chatId,
          `‚úÖ –í–∞—à Telegram —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É:\n*${linkTelegramUser.user?.name}* (${linkTelegramUser.user?.email})`,
          { parse_mode: "Markdown" }
        );
      } else {
        await sendTelegramMessage(
          botToken,
          chatId,
          `üîó –î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Telegram –∫ –∞–∫–∫–∞—É–Ω—Ç—É:\n\n1. –ó–∞–π–¥–∏—Ç–µ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí Telegram\n3. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram ID: \`${message.from.id}\``,
          { parse_mode: "Markdown" }
        );
      }
      break;

    case "/status":
      await sendTelegramMessage(
        botToken,
        chatId,
        "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!"
      );
      break;

    default:
      await sendTelegramMessage(
        botToken,
        chatId,
        "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
      );
  }

  return NextResponse.json({ ok: true });
}

