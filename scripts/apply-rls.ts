/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è Row-Level Security (RLS) –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Prisma –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∫–æ–º–∞–Ω–¥
 */

import { PrismaClient } from '@prisma/client';
import fs from 'fs';
import path from 'path';

const prisma = new PrismaClient();

async function applyRLS() {
  console.log('üîê Applying Row-Level Security (RLS) to PostgreSQL...\n');

  try {
    // –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª
    const sqlFilePath = path.join(
      process.cwd(),
      'prisma',
      'migrations',
      'enable_rls.sql'
    );

    console.log(`üìù Reading SQL file: ${sqlFilePath}`);

    if (!fs.existsSync(sqlFilePath)) {
      throw new Error(`SQL file not found: ${sqlFilePath}`);
    }

    const sqlContent = fs.readFileSync(sqlFilePath, 'utf-8');

    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ SQL –∫–æ–º–∞–Ω–¥—ã (–ø–æ —Ç–æ—á–∫–µ —Å –∑–∞–ø—è—Ç–æ–π)
    const sqlCommands = sqlContent
      .split(';')
      .map((cmd) => cmd.trim())
      .filter((cmd) => {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        return (
          cmd.length > 0 &&
          !cmd.startsWith('--') &&
          !cmd.startsWith('/*')
        );
      });

    console.log(`üìä Found ${sqlCommands.length} SQL commands to execute\n`);

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É
    let successCount = 0;
    let errorCount = 0;

    for (let i = 0; i < sqlCommands.length; i++) {
      const command = sqlCommands[i];

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
      if (command.startsWith('CREATE') || command.startsWith('ALTER')) {
        try {
          console.log(`[${i + 1}/${sqlCommands.length}] Executing...`);
          await prisma.$executeRawUnsafe(command + ';');
          successCount++;
        } catch (error: any) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ "already exists"
          if (
            error.message.includes('already exists') ||
            error.message.includes('does not exist')
          ) {
            console.log(`  ‚ö†Ô∏è  Skipped (already exists or not found)`);
          } else {
            console.error(`  ‚ùå Error: ${error.message}`);
            errorCount++;
          }
        }
      }
    }

    console.log('\nüìä Summary:');
    console.log(`  ‚úÖ Successfully executed: ${successCount}`);
    console.log(`  ‚ùå Errors: ${errorCount}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ RLS –≤–∫–ª—é—á–µ–Ω
    console.log('\nüîç Verifying RLS status...');

    const rlsStatus: any[] = await prisma.$queryRaw`
      SELECT 
        schemaname, 
        tablename, 
        rowsecurity 
      FROM pg_tables 
      WHERE schemaname = 'public' 
        AND tablename IN ('tenants', 'users', 'tickets', 'categories', 'queues')
      ORDER BY tablename;
    `;

    console.log('\nüìã RLS Status:');
    console.table(rlsStatus);

    const allEnabled = rlsStatus.every((row) => row.rowsecurity === true);

    if (allEnabled) {
      console.log('\n‚úÖ RLS is now active on all tables!');
    } else {
      console.log('\n‚ö†Ô∏è  Warning: Some tables do not have RLS enabled');
    }

    console.log('\n‚ö†Ô∏è  IMPORTANT: Restart your Next.js dev server:');
    console.log('   bun run dev\n');
  } catch (error) {
    console.error('\n‚ùå Fatal error:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
applyRLS()
  .then(() => {
    process.exit(0);
  })
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });

